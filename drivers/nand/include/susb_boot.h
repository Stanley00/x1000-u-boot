/*
 *	usb_boot.h
 */
#ifndef __USB_BOOT_H__
#define __USB_BOOT_H__

/*---------------------------------------------------------*/

/* Standard requests, for the bRequest field of a SETUP packet. */
#define USB_REQ_GET_STATUS		0x00
#define USB_REQ_CLEAR_FEATURE		0x01
#define USB_REQ_SET_FEATURE		0x03
#define USB_REQ_SET_ADDRESS		0x05
#define USB_REQ_GET_DESCRIPTOR		0x06
#define USB_REQ_SET_DESCRIPTOR		0x07
#define USB_REQ_GET_CONFIGURATION	0x08
#define USB_REQ_SET_CONFIGURATION	0x09
#define USB_REQ_GET_INTERFACE		0x0A
#define USB_REQ_SET_INTERFACE		0x0B
#define USB_REQ_SYNCH_FRAME		0x0C

/* Vendor requests. */
#define EP0_GET_CPU_INFO		0x00
#define EP0_SET_DATA_ADDRESS		0x01
#define EP0_SET_DATA_LENGTH		0x02
#define EP0_FLUSH_CACHES		0x03
#define EP0_PROG_START1			0x04
#define EP0_PROG_START2			0x05

/* Descriptor types ... USB 2.0 spec table 9.5 */
#define USB_DT_DEVICE			0x01
#define USB_DT_CONFIG			0x02
#define USB_DT_STRING			0x03
#define USB_DT_INTERFACE		0x04
#define USB_DT_ENDPOINT			0x05
#define USB_DT_DEVICE_QUALIFIER		0x06
#define USB_DT_OTHER_SPEED_CONFIG	0x07
#define USB_DT_INTERFACE_POWER		0x08
/* these are from a minor usb 2.0 revision (ECN) */
#define USB_DT_OTG			0x09
#define USB_DT_DEBUG			0x0a
#define USB_DT_INTERFACE_ASSOCIATION	0x0b


#define USB_DT_DEVICE_SIZE		18
#define USB_DT_CONFIG_SIZE		9

/*---------------------------------------------------------*/

#define NULL 0

/*---------------------------------------------------------*/
typedef struct usb_status {
	u8 *addr;			// save of operate data address
	u32 setup_packet[2];
	u32 length;			// save of operate data length
	u32 xfer_count;			// length of transfered 
	u32 data_tran_flag;		 
} USB_STATUS;

/*---------------------------------------------------------*/
/*---------------------------------------------------------*/
static u8 device_desc[] = {	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40,
				0x08, 0xa1, 0x75, 0x47, 0x00, 0x01, 0x01, 0x02,
				0x00, 0x01					};

static u8 dev_qualifier[] = {	0x0a, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 
				0x01, 0x00					};

static u8 hs_desc[] = {	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 
			0x01, 0x09, 0x04, 0x00, 0x00, 0x02, 0xff, 0x00, 
			0x50, 0x00, 0x07, 0x05, 0x01, 0x02, 0x00, 0x02, 
			0x00, 0x07, 0x05, 0x81, 0x02, 0x00, 0x02, 0x00	};

static u8 fs_desc[] = {	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 
			0x01, 0x09, 0x04, 0x00, 0x00, 0x02, 0xff, 0x00, 
			0x50, 0x00, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00, 
			0x00, 0x07, 0x05, 0x81, 0x02, 0x40, 0x00, 0x00	};

static u8 string_lang_ids[] = {0x04, 0x03, 0x09, 0x04};

static u8 string_manufacture[] = {	0x10, 0x03, 0x49, 0x00, 0x6e, 0x00, 0x67, 0x00, 
					0x65, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00	};

static u8 string_product[] = {	0x2e, 0x03, 0x4a, 0x00, 0x5a, 0x00, 0x34, 0x00, 
				0x37, 0x00, 0x38, 0x00, 0x30, 0x00, 0x20, 0x00, 
				0x55, 0x00, 0x53, 0x00, 0x42, 0x00, 0x20, 0x00, 
				0x42, 0x00, 0x6f, 0x00, 0x6f, 0x00, 0x74, 0x00, 
				0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 
				0x69, 0x00, 0x63, 0x00, 0x65, 0x00		};

static u8 cpu_info_data[] = {	'J', 'Z', '4', '7', '7', '5', 'V', '1'};

#endif  /* __USB_BOOT_H__ */
